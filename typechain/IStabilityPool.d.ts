/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IStabilityPoolInterface extends ethers.utils.Interface {
  functions: {
    "getCompoundedFrontEndStake(address)": FunctionFragment;
    "getCompoundedLUSDDeposit(address)": FunctionFragment;
    "getDepositorETHGain(address)": FunctionFragment;
    "getDepositorLQTYGain(address)": FunctionFragment;
    "getETH()": FunctionFragment;
    "getFrontEndLQTYGain(address)": FunctionFragment;
    "getTotalLUSDDeposits()": FunctionFragment;
    "offset(uint256,uint256)": FunctionFragment;
    "provideToSP(uint256,address)": FunctionFragment;
    "registerFrontEnd(uint256)": FunctionFragment;
    "withdrawETHGainToTrove(address,address)": FunctionFragment;
    "withdrawFromSP(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getCompoundedFrontEndStake",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCompoundedLUSDDeposit",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositorETHGain",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositorLQTYGain",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getFrontEndLQTYGain",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalLUSDDeposits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "offset",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "provideToSP",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerFrontEnd",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETHGainToTrove",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromSP",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getCompoundedFrontEndStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCompoundedLUSDDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositorETHGain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositorLQTYGain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFrontEndLQTYGain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalLUSDDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "offset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "provideToSP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerFrontEnd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETHGainToTrove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromSP",
    data: BytesLike
  ): Result;

  events: {};
}

export class IStabilityPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IStabilityPoolInterface;

  functions: {
    getCompoundedFrontEndStake(
      _frontEnd: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCompoundedLUSDDeposit(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDepositorETHGain(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDepositorLQTYGain(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getETH(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFrontEndLQTYGain(
      _frontEnd: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalLUSDDeposits(overrides?: CallOverrides): Promise<[BigNumber]>;

    offset(
      _debt: BigNumberish,
      _coll: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    provideToSP(
      _amount: BigNumberish,
      _frontEndTag: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerFrontEnd(
      _kickbackRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawETHGainToTrove(
      _upperHint: string,
      _lowerHint: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFromSP(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getCompoundedFrontEndStake(
    _frontEnd: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCompoundedLUSDDeposit(
    _depositor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDepositorETHGain(
    _depositor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDepositorLQTYGain(
    _depositor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getETH(overrides?: CallOverrides): Promise<BigNumber>;

  getFrontEndLQTYGain(
    _frontEnd: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalLUSDDeposits(overrides?: CallOverrides): Promise<BigNumber>;

  offset(
    _debt: BigNumberish,
    _coll: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  provideToSP(
    _amount: BigNumberish,
    _frontEndTag: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerFrontEnd(
    _kickbackRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawETHGainToTrove(
    _upperHint: string,
    _lowerHint: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFromSP(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getCompoundedFrontEndStake(
      _frontEnd: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCompoundedLUSDDeposit(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositorETHGain(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositorLQTYGain(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getETH(overrides?: CallOverrides): Promise<BigNumber>;

    getFrontEndLQTYGain(
      _frontEnd: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalLUSDDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    offset(
      _debt: BigNumberish,
      _coll: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    provideToSP(
      _amount: BigNumberish,
      _frontEndTag: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registerFrontEnd(
      _kickbackRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawETHGainToTrove(
      _upperHint: string,
      _lowerHint: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFromSP(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getCompoundedFrontEndStake(
      _frontEnd: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCompoundedLUSDDeposit(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositorETHGain(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositorLQTYGain(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getETH(overrides?: CallOverrides): Promise<BigNumber>;

    getFrontEndLQTYGain(
      _frontEnd: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalLUSDDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    offset(
      _debt: BigNumberish,
      _coll: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    provideToSP(
      _amount: BigNumberish,
      _frontEndTag: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerFrontEnd(
      _kickbackRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawETHGainToTrove(
      _upperHint: string,
      _lowerHint: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFromSP(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getCompoundedFrontEndStake(
      _frontEnd: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCompoundedLUSDDeposit(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositorETHGain(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositorLQTYGain(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFrontEndLQTYGain(
      _frontEnd: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalLUSDDeposits(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offset(
      _debt: BigNumberish,
      _coll: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    provideToSP(
      _amount: BigNumberish,
      _frontEndTag: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerFrontEnd(
      _kickbackRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawETHGainToTrove(
      _upperHint: string,
      _lowerHint: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFromSP(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
