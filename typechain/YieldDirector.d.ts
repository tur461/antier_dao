/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface YieldDirectorInterface extends ethers.utils.Interface {
  functions: {
    "authority()": FunctionFragment;
    "deposit(uint256,address)": FunctionFragment;
    "depositDisabled()": FunctionFragment;
    "depositsTo(address,address)": FunctionFragment;
    "disableDeposits(bool)": FunctionFragment;
    "disableRedeems(bool)": FunctionFragment;
    "disableWithdrawals(bool)": FunctionFragment;
    "donatedTo(address,address)": FunctionFragment;
    "donationInfo(address,uint256)": FunctionFragment;
    "emergencyShutdown(bool)": FunctionFragment;
    "getAllDeposits(address)": FunctionFragment;
    "recipientInfo(address)": FunctionFragment;
    "redeem()": FunctionFragment;
    "redeemDisabled()": FunctionFragment;
    "redeemableBalance(address)": FunctionFragment;
    "sOHM()": FunctionFragment;
    "setAuthority(address)": FunctionFragment;
    "totalDeposits(address)": FunctionFragment;
    "totalDonated(address)": FunctionFragment;
    "withdraw(uint256,address)": FunctionFragment;
    "withdrawAll()": FunctionFragment;
    "withdrawDisabled()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositDisabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositsTo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "disableDeposits",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "disableRedeems",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "disableWithdrawals",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "donatedTo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "donationInfo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyShutdown",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllDeposits",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "recipientInfo",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "redeem", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeemDisabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemableBalance",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "sOHM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAuthority",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDeposits",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDonated",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawDisabled",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositDisabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositsTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disableDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableRedeems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donatedTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "donationInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyShutdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recipientInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemDisabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemableBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sOHM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDonated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDisabled",
    data: BytesLike
  ): Result;

  events: {
    "AllWithdrawn(address,uint256)": EventFragment;
    "AuthorityUpdated(address)": EventFragment;
    "Deposited(address,address,uint256)": EventFragment;
    "Donated(address,address,uint256)": EventFragment;
    "EmergencyShutdown(bool)": EventFragment;
    "Redeemed(address,uint256)": EventFragment;
    "Withdrawn(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AllWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuthorityUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Donated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyShutdown"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export type AllWithdrawnEvent = TypedEvent<
  [string, BigNumber] & { donor_: string; amount_: BigNumber }
>;

export type AuthorityUpdatedEvent = TypedEvent<
  [string] & { authority: string }
>;

export type DepositedEvent = TypedEvent<
  [string, string, BigNumber] & {
    donor_: string;
    recipient_: string;
    amount_: BigNumber;
  }
>;

export type DonatedEvent = TypedEvent<
  [string, string, BigNumber] & {
    donor_: string;
    recipient_: string;
    amount_: BigNumber;
  }
>;

export type EmergencyShutdownEvent = TypedEvent<
  [boolean] & { active_: boolean }
>;

export type RedeemedEvent = TypedEvent<
  [string, BigNumber] & { recipient_: string; amount_: BigNumber }
>;

export type WithdrawnEvent = TypedEvent<
  [string, string, BigNumber] & {
    donor_: string;
    recipient_: string;
    amount_: BigNumber;
  }
>;

export class YieldDirector extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: YieldDirectorInterface;

  functions: {
    authority(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      amount_: BigNumberish,
      recipient_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositDisabled(overrides?: CallOverrides): Promise<[boolean]>;

    depositsTo(
      donor_: string,
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    disableDeposits(
      active_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disableRedeems(
      active_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disableWithdrawals(
      active_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    donatedTo(
      donor_: string,
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    donationInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        recipient: string;
        deposit: BigNumber;
        agnosticDeposit: BigNumber;
        carry: BigNumber;
        indexAtLastChange: BigNumber;
      }
    >;

    emergencyShutdown(
      active_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllDeposits(
      donor_: string,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    recipientInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalDebt: BigNumber;
        carry: BigNumber;
        agnosticDebt: BigNumber;
        indexAtLastChange: BigNumber;
      }
    >;

    redeem(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemDisabled(overrides?: CallOverrides): Promise<[boolean]>;

    redeemableBalance(
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    sOHM(overrides?: CallOverrides): Promise<[string]>;

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalDeposits(
      donor_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalDonated(
      donor_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdraw(
      amount_: BigNumberish,
      recipient_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawDisabled(overrides?: CallOverrides): Promise<[boolean]>;
  };

  authority(overrides?: CallOverrides): Promise<string>;

  deposit(
    amount_: BigNumberish,
    recipient_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositDisabled(overrides?: CallOverrides): Promise<boolean>;

  depositsTo(
    donor_: string,
    recipient_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  disableDeposits(
    active_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disableRedeems(
    active_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disableWithdrawals(
    active_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  donatedTo(
    donor_: string,
    recipient_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  donationInfo(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      recipient: string;
      deposit: BigNumber;
      agnosticDeposit: BigNumber;
      carry: BigNumber;
      indexAtLastChange: BigNumber;
    }
  >;

  emergencyShutdown(
    active_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllDeposits(
    donor_: string,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  recipientInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalDebt: BigNumber;
      carry: BigNumber;
      agnosticDebt: BigNumber;
      indexAtLastChange: BigNumber;
    }
  >;

  redeem(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemDisabled(overrides?: CallOverrides): Promise<boolean>;

  redeemableBalance(
    recipient_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sOHM(overrides?: CallOverrides): Promise<string>;

  setAuthority(
    _newAuthority: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalDeposits(donor_: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalDonated(donor_: string, overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    amount_: BigNumberish,
    recipient_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawDisabled(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    authority(overrides?: CallOverrides): Promise<string>;

    deposit(
      amount_: BigNumberish,
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    depositDisabled(overrides?: CallOverrides): Promise<boolean>;

    depositsTo(
      donor_: string,
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disableDeposits(active_: boolean, overrides?: CallOverrides): Promise<void>;

    disableRedeems(active_: boolean, overrides?: CallOverrides): Promise<void>;

    disableWithdrawals(
      active_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    donatedTo(
      donor_: string,
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    donationInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        recipient: string;
        deposit: BigNumber;
        agnosticDeposit: BigNumber;
        carry: BigNumber;
        indexAtLastChange: BigNumber;
      }
    >;

    emergencyShutdown(
      active_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllDeposits(
      donor_: string,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    recipientInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalDebt: BigNumber;
        carry: BigNumber;
        agnosticDebt: BigNumber;
        indexAtLastChange: BigNumber;
      }
    >;

    redeem(overrides?: CallOverrides): Promise<void>;

    redeemDisabled(overrides?: CallOverrides): Promise<boolean>;

    redeemableBalance(
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sOHM(overrides?: CallOverrides): Promise<string>;

    setAuthority(
      _newAuthority: string,
      overrides?: CallOverrides
    ): Promise<void>;

    totalDeposits(
      donor_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalDonated(donor_: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      amount_: BigNumberish,
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAll(overrides?: CallOverrides): Promise<void>;

    withdrawDisabled(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "AllWithdrawn(address,uint256)"(
      donor_?: string | null,
      amount_?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { donor_: string; amount_: BigNumber }
    >;

    AllWithdrawn(
      donor_?: string | null,
      amount_?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { donor_: string; amount_: BigNumber }
    >;

    "AuthorityUpdated(address)"(
      authority?: string | null
    ): TypedEventFilter<[string], { authority: string }>;

    AuthorityUpdated(
      authority?: string | null
    ): TypedEventFilter<[string], { authority: string }>;

    "Deposited(address,address,uint256)"(
      donor_?: string | null,
      recipient_?: string | null,
      amount_?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { donor_: string; recipient_: string; amount_: BigNumber }
    >;

    Deposited(
      donor_?: string | null,
      recipient_?: string | null,
      amount_?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { donor_: string; recipient_: string; amount_: BigNumber }
    >;

    "Donated(address,address,uint256)"(
      donor_?: string | null,
      recipient_?: string | null,
      amount_?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { donor_: string; recipient_: string; amount_: BigNumber }
    >;

    Donated(
      donor_?: string | null,
      recipient_?: string | null,
      amount_?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { donor_: string; recipient_: string; amount_: BigNumber }
    >;

    "EmergencyShutdown(bool)"(
      active_?: null
    ): TypedEventFilter<[boolean], { active_: boolean }>;

    EmergencyShutdown(
      active_?: null
    ): TypedEventFilter<[boolean], { active_: boolean }>;

    "Redeemed(address,uint256)"(
      recipient_?: string | null,
      amount_?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { recipient_: string; amount_: BigNumber }
    >;

    Redeemed(
      recipient_?: string | null,
      amount_?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { recipient_: string; amount_: BigNumber }
    >;

    "Withdrawn(address,address,uint256)"(
      donor_?: string | null,
      recipient_?: string | null,
      amount_?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { donor_: string; recipient_: string; amount_: BigNumber }
    >;

    Withdrawn(
      donor_?: string | null,
      recipient_?: string | null,
      amount_?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { donor_: string; recipient_: string; amount_: BigNumber }
    >;
  };

  estimateGas: {
    authority(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      amount_: BigNumberish,
      recipient_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositDisabled(overrides?: CallOverrides): Promise<BigNumber>;

    depositsTo(
      donor_: string,
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disableDeposits(
      active_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disableRedeems(
      active_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disableWithdrawals(
      active_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    donatedTo(
      donor_: string,
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    donationInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyShutdown(
      active_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllDeposits(
      donor_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recipientInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemDisabled(overrides?: CallOverrides): Promise<BigNumber>;

    redeemableBalance(
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sOHM(overrides?: CallOverrides): Promise<BigNumber>;

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalDeposits(
      donor_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalDonated(donor_: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      amount_: BigNumberish,
      recipient_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawDisabled(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      amount_: BigNumberish,
      recipient_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositDisabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositsTo(
      donor_: string,
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disableDeposits(
      active_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disableRedeems(
      active_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disableWithdrawals(
      active_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    donatedTo(
      donor_: string,
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    donationInfo(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyShutdown(
      active_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllDeposits(
      donor_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recipientInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeem(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemDisabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemableBalance(
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sOHM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalDeposits(
      donor_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalDonated(
      donor_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount_: BigNumberish,
      recipient_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawDisabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
