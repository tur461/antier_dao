/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IYieldDirectorInterface extends ethers.utils.Interface {
  functions: {
    "deposit(uint256,address)": FunctionFragment;
    "depositsTo(address,address)": FunctionFragment;
    "donatedTo(address,address)": FunctionFragment;
    "getAllDeposits(address)": FunctionFragment;
    "redeem()": FunctionFragment;
    "redeemableBalance(address)": FunctionFragment;
    "totalDeposits(address)": FunctionFragment;
    "totalDonated(address)": FunctionFragment;
    "withdraw(uint256,address)": FunctionFragment;
    "withdrawAll()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositsTo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "donatedTo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllDeposits",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "redeem", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeemableBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDeposits",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDonated",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositsTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "donatedTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemableBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDonated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;

  events: {};
}

export class IYieldDirector extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IYieldDirectorInterface;

  functions: {
    deposit(
      amount_: BigNumberish,
      recipient_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositsTo(
      donor_: string,
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    donatedTo(
      donor_: string,
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAllDeposits(
      donor_: string,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    redeem(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemableBalance(
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalDeposits(
      donor_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalDonated(
      donor_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdraw(
      amount_: BigNumberish,
      recipient_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  deposit(
    amount_: BigNumberish,
    recipient_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositsTo(
    donor_: string,
    recipient_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  donatedTo(
    donor_: string,
    recipient_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAllDeposits(
    donor_: string,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  redeem(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemableBalance(
    recipient_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalDeposits(donor_: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalDonated(donor_: string, overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    amount_: BigNumberish,
    recipient_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deposit(
      amount_: BigNumberish,
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    depositsTo(
      donor_: string,
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    donatedTo(
      donor_: string,
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllDeposits(
      donor_: string,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    redeem(overrides?: CallOverrides): Promise<void>;

    redeemableBalance(
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalDeposits(
      donor_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalDonated(donor_: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      amount_: BigNumberish,
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAll(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    deposit(
      amount_: BigNumberish,
      recipient_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositsTo(
      donor_: string,
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    donatedTo(
      donor_: string,
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllDeposits(
      donor_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemableBalance(
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalDeposits(
      donor_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalDonated(donor_: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      amount_: BigNumberish,
      recipient_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deposit(
      amount_: BigNumberish,
      recipient_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositsTo(
      donor_: string,
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    donatedTo(
      donor_: string,
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllDeposits(
      donor_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeem(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemableBalance(
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalDeposits(
      donor_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalDonated(
      donor_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount_: BigNumberish,
      recipient_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
