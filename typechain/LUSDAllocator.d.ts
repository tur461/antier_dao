/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LUSDAllocatorInterface extends ethers.utils.Interface {
  functions: {
    "FEE_PRECISION()": FunctionFragment;
    "POOL_FEE_MAX()": FunctionFragment;
    "authority()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "ethToLUSDRatio()": FunctionFragment;
    "frontEndAddress()": FunctionFragment;
    "getETHRewards()": FunctionFragment;
    "getLQTYRewards()": FunctionFragment;
    "harvest(uint256)": FunctionFragment;
    "hopTokenAddress()": FunctionFragment;
    "lqtyTokenAddress()": FunctionFragment;
    "lusdTokenAddress()": FunctionFragment;
    "poolFee()": FunctionFragment;
    "setAuthority(address)": FunctionFragment;
    "setEthToLUSDRatio(uint256)": FunctionFragment;
    "setFrontEndAddress(address)": FunctionFragment;
    "setHopTokenAddress(address)": FunctionFragment;
    "setPoolFee(uint256)": FunctionFragment;
    "totalAmountDeployed()": FunctionFragment;
    "totalValueDeployed()": FunctionFragment;
    "treasury()": FunctionFragment;
    "updateTreasury()": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "FEE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POOL_FEE_MAX",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ethToLUSDRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "frontEndAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getETHRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLQTYRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "harvest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hopTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lqtyTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lusdTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "poolFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAuthority",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setEthToLUSDRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFrontEndAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setHopTokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAmountDeployed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalValueDeployed",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "FEE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POOL_FEE_MAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ethToLUSDRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "frontEndAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getETHRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLQTYRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hopTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lqtyTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lusdTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEthToLUSDRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFrontEndAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHopTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPoolFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAmountDeployed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalValueDeployed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AuthorityUpdated(address)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorityUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
}

export type AuthorityUpdatedEvent = TypedEvent<
  [string] & { authority: string }
>;

export type DepositEvent = TypedEvent<
  [string, BigNumber] & { dst: string; amount: BigNumber }
>;

export class LUSDAllocator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LUSDAllocatorInterface;

  functions: {
    FEE_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    POOL_FEE_MAX(overrides?: CallOverrides): Promise<[BigNumber]>;

    authority(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ethToLUSDRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    frontEndAddress(overrides?: CallOverrides): Promise<[string]>;

    getETHRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLQTYRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    harvest(
      minETHLUSDRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hopTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    lqtyTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    lusdTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    poolFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEthToLUSDRatio(
      _ethToLUSDRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFrontEndAddress(
      _frontEndAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHopTokenAddress(
      _hopTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPoolFee(
      _poolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalAmountDeployed(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalValueDeployed(overrides?: CallOverrides): Promise<[BigNumber]>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    updateTreasury(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  FEE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  POOL_FEE_MAX(overrides?: CallOverrides): Promise<BigNumber>;

  authority(overrides?: CallOverrides): Promise<string>;

  deposit(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ethToLUSDRatio(overrides?: CallOverrides): Promise<BigNumber>;

  frontEndAddress(overrides?: CallOverrides): Promise<string>;

  getETHRewards(overrides?: CallOverrides): Promise<BigNumber>;

  getLQTYRewards(overrides?: CallOverrides): Promise<BigNumber>;

  harvest(
    minETHLUSDRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hopTokenAddress(overrides?: CallOverrides): Promise<string>;

  lqtyTokenAddress(overrides?: CallOverrides): Promise<string>;

  lusdTokenAddress(overrides?: CallOverrides): Promise<string>;

  poolFee(overrides?: CallOverrides): Promise<BigNumber>;

  setAuthority(
    _newAuthority: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEthToLUSDRatio(
    _ethToLUSDRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFrontEndAddress(
    _frontEndAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHopTokenAddress(
    _hopTokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPoolFee(
    _poolFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalAmountDeployed(overrides?: CallOverrides): Promise<BigNumber>;

  totalValueDeployed(overrides?: CallOverrides): Promise<BigNumber>;

  treasury(overrides?: CallOverrides): Promise<string>;

  updateTreasury(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    FEE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    POOL_FEE_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    authority(overrides?: CallOverrides): Promise<string>;

    deposit(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    ethToLUSDRatio(overrides?: CallOverrides): Promise<BigNumber>;

    frontEndAddress(overrides?: CallOverrides): Promise<string>;

    getETHRewards(overrides?: CallOverrides): Promise<BigNumber>;

    getLQTYRewards(overrides?: CallOverrides): Promise<BigNumber>;

    harvest(
      minETHLUSDRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hopTokenAddress(overrides?: CallOverrides): Promise<string>;

    lqtyTokenAddress(overrides?: CallOverrides): Promise<string>;

    lusdTokenAddress(overrides?: CallOverrides): Promise<string>;

    poolFee(overrides?: CallOverrides): Promise<BigNumber>;

    setAuthority(
      _newAuthority: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setEthToLUSDRatio(
      _ethToLUSDRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFrontEndAddress(
      _frontEndAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setHopTokenAddress(
      _hopTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolFee(
      _poolFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalAmountDeployed(overrides?: CallOverrides): Promise<BigNumber>;

    totalValueDeployed(overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<string>;

    updateTreasury(overrides?: CallOverrides): Promise<void>;

    withdraw(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AuthorityUpdated(address)"(
      authority?: string | null
    ): TypedEventFilter<[string], { authority: string }>;

    AuthorityUpdated(
      authority?: string | null
    ): TypedEventFilter<[string], { authority: string }>;

    "Deposit(address,uint256)"(
      dst?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { dst: string; amount: BigNumber }
    >;

    Deposit(
      dst?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { dst: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    FEE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    POOL_FEE_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    authority(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ethToLUSDRatio(overrides?: CallOverrides): Promise<BigNumber>;

    frontEndAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getETHRewards(overrides?: CallOverrides): Promise<BigNumber>;

    getLQTYRewards(overrides?: CallOverrides): Promise<BigNumber>;

    harvest(
      minETHLUSDRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hopTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    lqtyTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    lusdTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    poolFee(overrides?: CallOverrides): Promise<BigNumber>;

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEthToLUSDRatio(
      _ethToLUSDRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFrontEndAddress(
      _frontEndAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHopTokenAddress(
      _hopTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPoolFee(
      _poolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalAmountDeployed(overrides?: CallOverrides): Promise<BigNumber>;

    totalValueDeployed(overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    updateTreasury(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FEE_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    POOL_FEE_MAX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ethToLUSDRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    frontEndAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getETHRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLQTYRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvest(
      minETHLUSDRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hopTokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lqtyTokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lusdTokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEthToLUSDRatio(
      _ethToLUSDRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFrontEndAddress(
      _frontEndAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHopTokenAddress(
      _hopTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPoolFee(
      _poolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalAmountDeployed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalValueDeployed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateTreasury(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
