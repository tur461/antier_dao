/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ConvexAllocatorInterface extends ethers.utils.Interface {
  functions: {
    "addRewardTokens(address,address[])": FunctionFragment;
    "addToken(address,address,address,address[],int128,uint256,uint256)": FunctionFragment;
    "authority()": FunctionFragment;
    "deposit(address,uint256,uint256[4],uint256)": FunctionFragment;
    "exceedsLimit(address,uint256)": FunctionFragment;
    "harvest(address[])": FunctionFragment;
    "lowerLimit(address,uint256)": FunctionFragment;
    "pidForReserve(address)": FunctionFragment;
    "queueRaiseLimit(address,uint256)": FunctionFragment;
    "raiseLimit(address)": FunctionFragment;
    "rewardsPending(address)": FunctionFragment;
    "setAuthority(address)": FunctionFragment;
    "timelockInBlocks()": FunctionFragment;
    "tokenInfo(address)": FunctionFragment;
    "totalValueDeployed()": FunctionFragment;
    "updateTreasury()": FunctionFragment;
    "withdraw(address,uint256,uint256,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addRewardTokens",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addToken",
    values: [
      string,
      string,
      string,
      string[],
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      string,
      BigNumberish,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exceedsLimit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "harvest", values: [string[]]): string;
  encodeFunctionData(
    functionFragment: "lowerLimit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pidForReserve",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "queueRaiseLimit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "raiseLimit", values: [string]): string;
  encodeFunctionData(
    functionFragment: "rewardsPending",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthority",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "timelockInBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tokenInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "totalValueDeployed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "addRewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exceedsLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lowerLimit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pidForReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queueRaiseLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "raiseLimit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsPending",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timelockInBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalValueDeployed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AuthorityUpdated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorityUpdated"): EventFragment;
}

export type AuthorityUpdatedEvent = TypedEvent<
  [string] & { authority: string }
>;

export class ConvexAllocator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ConvexAllocatorInterface;

  functions: {
    addRewardTokens(
      baseToken: string,
      rewardTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addToken(
      token: string,
      curveToken: string,
      rewardPool: string,
      rewardTokens: string[],
      index: BigNumberish,
      max: BigNumberish,
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    authority(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      token: string,
      amount: BigNumberish,
      amounts: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exceedsLimit(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    harvest(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lowerLimit(
      token: string,
      newMax: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pidForReserve(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    queueRaiseLimit(
      token: string,
      newMax: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    raiseLimit(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardsPending(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timelockInBlocks(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        underlying: string;
        curveToken: string;
        rewardPool: string;
        index: BigNumber;
        deployed: BigNumber;
        limit: BigNumber;
        newLimit: BigNumber;
        limitChangeTimelockEnd: BigNumber;
      }
    >;

    totalValueDeployed(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateTreasury(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      token: string,
      amount: BigNumberish,
      minAmount: BigNumberish,
      reserve: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addRewardTokens(
    baseToken: string,
    rewardTokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addToken(
    token: string,
    curveToken: string,
    rewardPool: string,
    rewardTokens: string[],
    index: BigNumberish,
    max: BigNumberish,
    pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  authority(overrides?: CallOverrides): Promise<string>;

  deposit(
    token: string,
    amount: BigNumberish,
    amounts: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    minAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exceedsLimit(
    token: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  harvest(
    tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lowerLimit(
    token: string,
    newMax: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pidForReserve(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  queueRaiseLimit(
    token: string,
    newMax: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  raiseLimit(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardsPending(
    baseToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setAuthority(
    _newAuthority: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timelockInBlocks(overrides?: CallOverrides): Promise<BigNumber>;

  tokenInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      underlying: string;
      curveToken: string;
      rewardPool: string;
      index: BigNumber;
      deployed: BigNumber;
      limit: BigNumber;
      newLimit: BigNumber;
      limitChangeTimelockEnd: BigNumber;
    }
  >;

  totalValueDeployed(overrides?: CallOverrides): Promise<BigNumber>;

  updateTreasury(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    token: string,
    amount: BigNumberish,
    minAmount: BigNumberish,
    reserve: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addRewardTokens(
      baseToken: string,
      rewardTokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    addToken(
      token: string,
      curveToken: string,
      rewardPool: string,
      rewardTokens: string[],
      index: BigNumberish,
      max: BigNumberish,
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    authority(overrides?: CallOverrides): Promise<string>;

    deposit(
      token: string,
      amount: BigNumberish,
      amounts: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      minAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    exceedsLimit(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    harvest(tokens: string[], overrides?: CallOverrides): Promise<void>;

    lowerLimit(
      token: string,
      newMax: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pidForReserve(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    queueRaiseLimit(
      token: string,
      newMax: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    raiseLimit(token: string, overrides?: CallOverrides): Promise<void>;

    rewardsPending(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAuthority(
      _newAuthority: string,
      overrides?: CallOverrides
    ): Promise<void>;

    timelockInBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    tokenInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        underlying: string;
        curveToken: string;
        rewardPool: string;
        index: BigNumber;
        deployed: BigNumber;
        limit: BigNumber;
        newLimit: BigNumber;
        limitChangeTimelockEnd: BigNumber;
      }
    >;

    totalValueDeployed(overrides?: CallOverrides): Promise<BigNumber>;

    updateTreasury(overrides?: CallOverrides): Promise<void>;

    withdraw(
      token: string,
      amount: BigNumberish,
      minAmount: BigNumberish,
      reserve: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AuthorityUpdated(address)"(
      authority?: string | null
    ): TypedEventFilter<[string], { authority: string }>;

    AuthorityUpdated(
      authority?: string | null
    ): TypedEventFilter<[string], { authority: string }>;
  };

  estimateGas: {
    addRewardTokens(
      baseToken: string,
      rewardTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addToken(
      token: string,
      curveToken: string,
      rewardPool: string,
      rewardTokens: string[],
      index: BigNumberish,
      max: BigNumberish,
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    authority(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      token: string,
      amount: BigNumberish,
      amounts: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exceedsLimit(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvest(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lowerLimit(
      token: string,
      newMax: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pidForReserve(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    queueRaiseLimit(
      token: string,
      newMax: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    raiseLimit(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardsPending(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timelockInBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    tokenInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalValueDeployed(overrides?: CallOverrides): Promise<BigNumber>;

    updateTreasury(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      token: string,
      amount: BigNumberish,
      minAmount: BigNumberish,
      reserve: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addRewardTokens(
      baseToken: string,
      rewardTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addToken(
      token: string,
      curveToken: string,
      rewardPool: string,
      rewardTokens: string[],
      index: BigNumberish,
      max: BigNumberish,
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      token: string,
      amount: BigNumberish,
      amounts: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exceedsLimit(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvest(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lowerLimit(
      token: string,
      newMax: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pidForReserve(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queueRaiseLimit(
      token: string,
      newMax: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    raiseLimit(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardsPending(
      baseToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timelockInBlocks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalValueDeployed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateTreasury(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      token: string,
      amount: BigNumberish,
      minAmount: BigNumberish,
      reserve: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
